// SPDX-License-Identifier: AGPL-3.0-or-later

#ifndef DOPPLEGANGER_H
#define DOPPLEGANGER_H

#define DOPPLEGANGER g_Entities[STAGE_ENTITY_START]

typedef enum EntityIDs {
    /* 0x00 */ E_NONE,
    /* 0x01 */ E_FACTORY,
    /* 0x02 */ E_EXPLOSION,
    /* 0x03 */ E_PRIZE_DROP,
    /* 0x04 */ E_NUMERIC_DAMAGE,
    /* 0x05 */ E_RED_DOOR,
    /* 0x06 */ E_INTENSE_EXPLOSION,
    /* 0x07 */ E_SOUL_STEAL_ORB,
    /* 0x08 */ E_ROOM_FOREGROUND,
    /* 0x09 */ E_STAGE_NAME_POPUP,
    /* 0x0A */ E_EQUIP_ITEM_DROP,
    /* 0x0B */ E_RELIC_ORB,
    /* 0x0C */ E_HEART_DROP,
    /* 0x0D */ E_ENEMY_BLOOD,
    /* 0x0E */ E_MESSAGE_BOX,
    /* 0x0F */ E_ID_13,
    /* 0x10 */ E_ID_10,

    /* 0x14 */ E_EXPLOSION_VARIANTS = 0x14,
    /* 0x15 */ E_GREY_PUFF,
    /* 0x16 */ E_ID_16,
    /* 0x17 */ E_ID_17,
    /* 0x18 */ E_ID_18,
    /* 0x19 */ E_ID_19,
    /* 0x1A */ E_ID_1A,
    /* 0x1B */ E_ID_1B,
    /* 0x1C */ E_ID_1C,
    /* 0x1D */ E_ID_1D,
    /* 0x1E */ E_ID_1E,
    /* 0x1F */ E_ID_1F,

    /* 0x20 */ E_ID_20 = 0x20,
    /* 0x21 */ E_ID_21,
    /* 0x22 */ E_MIST = 0x22,
    /* 0x23 */ E_ID_23,
    /* 0x24 */ E_ID_24,
    /* 0x2F */ E_ID_2F = 0x2F,

    /* 0x36 */ E_ID_36 = 0x36,
    /* 0x37 */ E_ID_37 = 0x37,
    /* 0x38 */ E_ID_38,

    /* 0x41 */ E_ID_41 = 0x41,
    /* 0x42 */ E_ID_42 = 0x42,
    /* 0x43 */ E_ID_43 = 0x43,
    /* 0x44 */ E_ID_44 = 0x44,
    /* 0x50 */ E_ID_50 = 0x50, // may be E_WEAPON

    /* 0x60 */ E_ID_60 = 0x60,
    /* 0xB8 */ E_ID_B8 = 0xB8,
    /* 0xEC */ E_ID_EC = 0xEC,
    /* 0x90 */ E_ID_90 = 0x90,
} EntityIDs;

typedef enum {
    Dop_Stand = 1,
    Dop_Walk,
    Dop_Crouch,
    Dop_Fall,
    Dop_Jump,
    Dop_MorphBat,
    Dop_MorphMist = 8,
    Dop_HighJump,
    Dop_UnmorphBat,
    Dop_Hit,
    Dop_StatusStone,
    Dop_UnmorphMist = 15,
    Dop_SwordWarp,
    Dop_Kill,
} Doppleganger_Step;

extern PlayerState g_Dop;

// this is similar to `WeaponAnimation` but
// with fewer fields.
typedef struct {
    AnimationFrame* frames;
    s8* frameProps;
    u16 soundId;
    u8 frameStart;
    u8 soundFrame;
} DopWeaponAnimation;

// Blueprints are copied from Alucard. Not all are relevant, but the
// indexes appear to match for now.

enum BlueprintKind {
    B_KIND_0,
    B_KIND_1,
    B_KIND_2,
    B_KIND_3,
    B_KIND_4,
    B_KIND_5,
    B_KIND_6,
    B_KIND_7,
    B_KIND_8,
    B_KIND_9,
    NUM_BLUEPRINT_KIND,
};

enum BlueprintOrigin {
    // Spawned entities have a life-cycle on their own and
    B_ORIGIN_DEFAULT,
    B_ORIGIN_1,
    B_ORIGIN_2,
    B_ORIGIN_3,
    B_ORIGIN_4,
    B_ORIGIN_5,
    B_ORIGIN_6,
    B_ORIGIN_7,
    B_ORIGIN_8,
    B_ORIGIN_9,
    B_ORIGIN_10,
    B_ORIGIN_11,
    B_ORIGIN_12,
    B_ORIGIN_13,
    B_ORIGIN_14,
};

enum DopBlueprints {
    BP_0,
    BP_1,
    BP_GRAVITY_BOOT_BEAM,
    BP_3,
    BP_4,
    BP_5,
    BP_6,
    BP_7,
    BP_8,
    BP_9,
    BP_10,
    BP_11,
    BP_12,
    BP_13,
    BP_14,
    BP_15,
    BP_16,
    BP_17,
    BP_18,
    BP_19,
    BP_20,
    BP_21,
    BP_22,
    BP_23,
    BP_24,
    BP_25,
    BP_26,
    BP_27,
    BP_28,
    BP_29,
    BP_30,
    BP_31,
    BP_32,
    BP_HELLFIRE,
    BP_HELLFIRE_SMALL_FIREBALL,
    BP_HELLFIRE_BIG_FIREBALL,
    BP_36,
    BP_37,
    BP_38,
    BP_39,
    BP_RIPPLE_OUTLINE,
    BP_41,
    BP_42,
    BP_43,
    BP_BLINK_WHITE,
    BP_45,
    BP_HIT_BY_ICE,
    BP_47,
    BP_48,
    BP_49,
    BP_50,
    BP_51,
    BP_52,
    BP_53,
    BP_54,
    BP_55,
    BP_56,
    BP_57,
    BP_58,
    BP_59,
    BP_60,
    BP_61,
    BP_62,
    BP_63,
    BP_64,
    BP_WING_SMASH_TRAIL,
    BP_66,
    BP_67,
    BP_68,
    BP_69,
    BP_70,
    BP_71,
    BP_72,
    BP_73,
    BP_74,
    BP_STOPWATCH_ACTIVATE,
    BP_76,
    BP_77,
    BP_78,
    BP_79,
    BP_80,
    BP_BAT_FIREBALL,
    BP_82,
    BP_83,
    BP_84,
    BP_85,
    BP_86,
    BP_87,
    BP_88,
    BP_89,
    BP_90,
    BP_91,
    BP_92,
    BP_93,
    BP_94,
    BP_95,
    BP_96,
    BP_97,
    BP_98,
    BP_SMALL_RISING_HEART,
    BP_100,
    BP_101,
    BP_102,
    BP_BAT_ECHO,
    BP_104,
    BP_105,
    BP_106,
    BP_107,
    BP_108,
    BP_109,
    BP_110,
    BP_111,
    BP_112,
    BP_113,
    BP_114,
    NUM_BLUEPRINTS,
};

#endif // DOPPLEGANGER_H
